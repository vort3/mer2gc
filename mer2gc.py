#!/usr/bin/env python3

from playwright.sync_api import sync_playwright, expect
from google.oauth2 import service_account
from gcsa.google_calendar import GoogleCalendar
from gcsa.event import Event
import keys
import datetime
import logging
import json
import sys
import os


def get_page(url, login, password):
    # Page is a browser page (tab) object

    playwright = sync_playwright().start()
    browser = playwright.firefox.launch()
    page = browser.new_page()
    page.goto(url)
    
    textboxes = page.get_by_role("textbox").all()
    textboxes[1].fill(login)
    textboxes[2].fill(password)
    page.get_by_role("button").first.click()
    
    expect(page).to_have_url("https://meridian.scat.kz/web.meridian/welcome.zul")
    page.goto(url + "/web.meridian/workplan.zul")
    logging.debug(page)
    return page, browser


def get_events(page):
    event_list = []

    expect(page.locator(".z-listitem").first).not_to_be_empty(timeout=30000)
    rows = page.locator(".z-listitem").all()
    for row in rows:
        event = {}
        for i, cell in enumerate(row.locator(".z-listcell-content").all()):
            content = []
            selector = ".popup-crew-list span" if i == 4 else "span"
            for span in cell.locator(selector).all():
                if span.get_attribute("style") != "display:none;":
                    content.append(span.inner_text())
            event[keys.cellkeys[i]] = content
        event_list.append(event)
    
    # Add date to each event
    for i, event in enumerate(event_list):
        if len(event) == 3:
            event["date"] = event["departure"][0].split()
        else:
            event["date"] = event_list[i - 1]["date"]
    
    # Delete pseudo events  that contain date for events for that day
    return list(filter(lambda i: len(i) != 4, event_list))


def process_event(event, calendar, dirurl):
    # Check if event is a training or reserve or a deadheading flight
    # and add the event to Google Calendar or update it if it exists

    if '/' in event["departure"][-1]:
        # ToDo: handle vacations better
        return

    elif len(event["event"]) == 0:
        # ToDo: handle trainings better
        event["event"] = ["TRN " + event["comment"][-1]]

    flight_number = event["event"][0]
    departure     = event["departure"][-1]
    arrival       = event["arrival"][-1]

    ac = event["event"][-1]
    ac = ac.replace(" / B" , " / UP-B" )
    ac = ac.replace(" / CJ", " / UP-CJ")

    dirurl = dirurl + ac.split()[-1]
    
    for i in range(len(event["crew"])):
        event["crew"][i] = event["crew"][i].replace(" 7", " +7", 2)
    crew = sorted(event["crew"], key=lambda s: "[pax]" in s)
    crew = "\n".join(crew)
    
    logging.info(event)
    if "Passenger on task" in event["info"]:
        title = f"{departure}-{arrival} {flight_number} (PAX)"
    elif "TRN" in event["event"][0]:
        title = flight_number
        dirurl = ""
    elif "Резерв" in event["event"][0]:
        title = flight_number = "RESERVE"
        dirurl = ""
    else:
        title = f"{departure}-{arrival} {flight_number}"
    
    start = datetime.datetime.strptime(
            event["date"][0] + event["departure"][0], "%d.%m.%Y%H:%M")
    start = start.replace(tzinfo=datetime.timezone.utc)
    end   = datetime.datetime.strptime(
            event["date"][0] + event["arrival"][0], "%d.%m.%Y%H:%M")
    end   = end.replace(tzinfo=datetime.timezone.utc)

    if "(+1)" in event["arrival"]:
        end += datetime.timedelta(days=1)
    
    logging.info(f"Current event:\t{start.date().isoformat()} {flight_number}")
    existing = list(calendar.get_events(time_min=start.date(),
                    time_max=end.date(), query=title, timezone="Etc/UTC"))
    if existing:
        print(f"{flight_number}:\t"
              f"{str(existing[0].start)[:16]} - {str(existing[0].end)[11:16]}")
        print("—" * len(flight_number) + "> "
              f"{str(start)[:16]} - {str(end)[11:16]}")
        existing[0].start = start
        existing[0].end = end
        existing[0].description = (ac + "\n" + dirurl + "\n\n" + crew +
                                   "\n\n" + "Generated by mer2gc")
        calendar.update_event(existing[0])
        return
    google_calendar_event = Event(title, start, end)
    google_calendar_event.timezone = "Etc/UTC"
    if title != "RESERVE":
        google_calendar_event.location = keys.locations.get(arrival,
                                                            "Unknown location")
    else:
        last_event = list(calendar.get_events(time_min=datetime.datetime.now() -
                                              datetime.timedelta(days=30),
                                              time_max=start))[-1]
        google_calendar_event.location = last_event.location
    google_calendar_event.add_popup_reminder(minutes_before_start=180)
    google_calendar_event.description = ac + "\n" + dirurl + "\n\n" + crew + \
                          "\n\n" + "Generated by mer2gc"
    print(f"Generated event:\t{title}")
    calendar.add_event(google_calendar_event)
    logging.info("Event added")


def check_documents(page):
    docs = page.locator(".main-template-header span").all()[2].inner_text()
    if docs != "0": print(f"You have {docs} unaquainted documents!")


def main():
    configpath = os.path.join(os.path.expanduser("~"), ".config", "mer2gc")
    
    config = sys.argv[-1] if "-c" in sys.argv else "config.json"
    
    with open(os.path.join(configpath, config)) as fp:
        conf = json.load(fp)
    
    SCOPES = ['https://www.googleapis.com/auth/calendar']
    SERVICE_ACCOUNT_FILE = os.path.join(configpath, "serviceacct.json")
    credentials = service_account.Credentials.from_service_account_file(
                  SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    calendar = GoogleCalendar(conf['calendar'], credentials=credentials)

    if "-v" in sys.argv:
        logging.basicConfig(format="[%(levelname)s]\t%(message)s",
                            level=logging.DEBUG, stream=sys.stdout)
    elif "-q" in sys.argv:
        logging.basicConfig(format="[%(levelname)s]\t%(message)s",
                            level=logging.WARNING, stream=sys.stdout)
    else:
        logging.basicConfig(format="[%(levelname)s]\t%(message)s",
                            level=logging.INFO, stream=sys.stdout)

    page, browser = get_page(conf['url'], conf['login'], conf['password'])
    events = get_events(page)
    for event in events:
        process_event(event, calendar, conf["dirurl"])
    
    check_documents(page)
    browser.close()


if __name__ == "__main__":
    main()

