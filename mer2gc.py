#!/usr/bin/env python3

from selenium import webdriver
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.common.by import By
from google.oauth2 import service_account
from gcsa.google_calendar import GoogleCalendar
from gcsa.event import Event
from bs4 import BeautifulSoup
import keys
import datetime
import logging
import json
import sys
import os


def get_pagesource(url, login, password):
    # Page source is a raw html source of rendered web page

    opt = Options()
    opt.headless = True
    opt.add_argument("-private")
    s = Service('/usr/bin/geckodriver', log_path=os.devnull)

    with webdriver.Firefox(options=opt, service=s) as driver:
        driver.get(url)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located(
                                       (By.CLASS_NAME, "z-button")))
        driver.find_elements(By.CLASS_NAME, "z-textbox")[0].send_keys(login)
        driver.find_elements(By.CLASS_NAME, "z-textbox")[1].send_keys(password)
        driver.find_element(By.CLASS_NAME, "z-button").click()
        driver.get(url + "/web.meridian/workplan.zul")
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located(
                                    (By.CLASS_NAME, "fio")))
        source = BeautifulSoup(driver.page_source, "html.parser")
        logging.debug(source)
        return source


def get_events(source):
    event_list = []

    rows = source.select(".z-listitem")
    for row in rows:
        event = {}
        for i, cell in enumerate(row.select(".z-listcell-content")):
            content = []
            selector = ".popup-crew-list span" if i == 4 else "span"
            for span in cell.select(selector):
                if "display:none" not in span.get("style", ""):
                    content.append(span.text)
            event[keys.cellkeys[i]] = content
        event_list.append(event)
    
    # Add date to each event
    for i, event in enumerate(event_list):
        if len(event) == 3:
            event["date"] = event["departure"][0].split()
        else:
            event["date"] = event_list[i - 1]["date"]
    
    # Delete pseudo events  that contain date for events for that day
    return list(filter(lambda i: len(i) != 4, event_list))


def process_event(event, calendar, dirurl):
    # Checks if event is a training or reserve or a deadheading flight
    # and add the event to Google Calendar or update it if it exists

    if '/' in event["departure"][-1]:
        # ToDo: handle vacations better
        return

    elif len(event["event"]) == 0:
        # ToDo: handle trainings better
        event["event"] = ["TRAINING: " + event["comment"][-1]]

    flight_number = event["event"][0]
    departure     = event["departure"][-1]
    arrival       = event["arrival"][-1]

    ac = event["event"][-1]
    ac = ac.replace(" / B" , " / UP-B" )
    ac = ac.replace(" / CJ", " / UP-CJ")

    dirurl = dirurl + ac.split()[-1]
    
    for i in range(len(event["crew"])):
        event["crew"][i] = event["crew"][i].replace(" 7", " +7", 2)
    crew = sorted(event["crew"], key=lambda s: "[pax]" in s)
    crew = "\n".join(crew)
    
    if "Passenger on task" in event["info"]:
        title = f"{departure}-{arrival} {flight_number} (PAX)"
    elif "TRAINING" in event["event"][0]:
        title = flight_number
        dirurl = ""
    elif "Резерв" in event["event"][0]:
        title = flight_number = "RESERVE"
        dirurl = ""
    else:
        title = f"{departure}-{arrival} {flight_number}"
    
    start = datetime.datetime.strptime(
            event["date"][0] + event["departure"][0], "%d.%m.%Y%H:%M")
    start = start.replace(tzinfo=datetime.timezone.utc)
    end   = datetime.datetime.strptime(
            event["date"][0] + event["arrival"][0], "%d.%m.%Y%H:%M")
    end   = end.replace(tzinfo=datetime.timezone.utc)

    if " (+1)" in event["arrival"]:
        end += datetime.timedelta(days=1)
    
    logging.info(f"Current event:\t{start.date().isoformat()} {flight_number}")
    existing = list(calendar.get_events(time_min=start.date(),
                    time_max=end.date(), query=title, timezone="Etc/UTC"))
    if existing:
        print(f"{flight_number}:\t"
              f"{str(existing[0].start)[:16]} - {str(existing[0].end)[:16]}")
        print(f"{flight_number}:\t"
              f"{str(start)[:16]} - {str(end)[:16]}")
        existing[0].start = start
        existing[0].end = end
        existing[0].description = (ac + "\n" + dirurl + "\n\n" + crew +
                                   "\n\n" + "Generated by mer2gc")
        calendar.update_event(existing[0])
        return
    google_calendar_event = Event(title, start, end)
    google_calendar_event.timezone = "Etc/UTC"
    if title != "RESERVE":
        google_calendar_event.location = keys.locations.get(arrival,
                                                            "Unknown location")
    else:
        last_event = list(calendar.get_events(time_min=datetime.datetime.now() -
                                              datetime.timedelta(days=30),
                                              time_max=start))[-1]
        google_calendar_event.location = last_event.location
    google_calendar_event.add_popup_reminder(minutes_before_start=180)
    google_calendar_event.description = ac + "\n" + dirurl + "\n\n" + crew + \
                          "\n\n" + "Generated by mer2gc"
    print(f"Generated event:\t{title}")
    calendar.add_event(google_calendar_event)
    logging.info("Event added")


def check_documents(source):
    docs = source.select(".main-template-header span")[2].text
    if docs != "0": print(f"You have {docs} unaquainted documents!")


def main():
    configpath = os.path.join(os.path.expanduser("~"), ".config", "mer2gc")
    with open(os.path.join(configpath, "config.json")) as fp:
        conf = json.load(fp)
    
    SCOPES = ['https://www.googleapis.com/auth/calendar']
    SERVICE_ACCOUNT_FILE = os.path.join(configpath, "serviceacct.json")
    credentials = service_account.Credentials.from_service_account_file(
                  SERVICE_ACCOUNT_FILE, scopes=SCOPES)
    calendar = GoogleCalendar(conf['calendar'], credentials=credentials)

    if "-v" in sys.argv:
        logging.basicConfig(format="[%(levelname)s]\t%(message)s",
                            level=logging.DEBUG, stream=sys.stdout)
    elif "-q" in sys.argv:
        logging.basicConfig(format="[%(levelname)s]\t%(message)s",
                            level=logging.WARNING, stream=sys.stdout)
    else:
        logging.basicConfig(format="[%(levelname)s]\t%(message)s",
                            level=logging.INFO, stream=sys.stdout)

    source = get_pagesource(conf['url'], conf['login'], conf['password'])
    events = get_events(source)
    for event in events:
        process_event(event, calendar, conf["dirurl"])
    
    check_documents(source)


if __name__ == "__main__":
    main()

